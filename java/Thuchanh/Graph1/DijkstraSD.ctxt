#BlueJ class context
comment0.target=DijkstraSD
comment0.text=\r\n\ \ Compilation\:\ \ javac\ DijkstraSP.java\r\n\ \ Execution\:\ \ \ \ java\ DijkstraSP\ input.txt\ s\r\n\ \ Dependencies\:\ EdgeWeightedDigraph_T.java\ IndexMinPQ.java\ Stack.java\ DirectedEdge.java\r\n\ \ Data\ files\:\ \ \ https\://algs4.cs.princeton.edu/44sp/tinyEWD.txt\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ https\://algs4.cs.princeton.edu/44sp/mediumEWD.txt\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ https\://algs4.cs.princeton.edu/44sp/largeEWD.txt\r\n\r\n\ \ Dijkstra's\ algorithm.\ Computes\ the\ shortest\ path\ tree.\r\n\ \ Assumes\ all\ weights\ are\ nonnegative.\r\n\r\n\ \ %\ java\ DijkstraSD\ tinyEWD.txt\ 0\r\n0\ to\ 6\ (1.51)\ \ 0->2\ \ 0.26\ \ \ 2->7\ \ 0.34\ \ \ 7->3\ \ 0.39\ \ \ 3->6\ \ 0.52\ \ \ \r\n1\ to\ 6\ (0.81)\ \ 1->3\ \ 0.29\ \ \ 3->6\ \ 0.52\ \ \ \r\n2\ to\ 6\ (1.25)\ \ 2->7\ \ 0.34\ \ \ 7->3\ \ 0.39\ \ \ 3->6\ \ 0.52\ \ \ \r\n3\ to\ 6\ (0.52)\ \ 3->6\ \ 0.52\ \ \ \r\n4\ to\ 6\ (1.28)\ \ 4->7\ \ 0.37\ \ \ 7->3\ \ 0.39\ \ \ 3->6\ \ 0.52\ \ \ \r\n5\ to\ 6\ (1.13)\ \ 5->1\ \ 0.32\ \ \ 1->3\ \ 0.29\ \ \ 3->6\ \ 0.52\ \ \ \r\n6\ to\ 6\ (0.00)\ \ \r\n7\ to\ 6\ (0.91)\ \ 7->3\ \ 0.39\ \ \ 3->6\ \ 0.52\ \r\n\r\n\ \ \r\n
comment1.params=G\ s
comment1.target=DijkstraSD(EdgeWeightedDigraph_T,\ int)
comment1.text=\r\n\ Computes\ a\ shortest-paths\ tree\ from\ the\ source\ vertex\ {@code\ s}\ to\ every\ other\r\n\ vertex\ in\ the\ edge-weighted\ digraph\ {@code\ G}.\r\n\r\n\ @param\ \ G\ the\ edge-weighted\ digraph\r\n\ @param\ \ s\ the\ source\ vertex\r\n\ @throws\ IllegalArgumentException\ if\ an\ edge\ weight\ is\ negative\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ s\ <\ V}\r\n
comment2.params=e
comment2.target=void\ relax(DirectedEdge)
comment3.params=v
comment3.target=double\ distTo(int)
comment3.text=\r\n\ Returns\ the\ length\ of\ a\ shortest\ path\ from\ the\ source\ vertex\ {@code\ s}\ to\ vertex\ {@code\ v}.\r\n\ @param\ \ v\ the\ destination\ vertex\r\n\ @return\ the\ length\ of\ a\ shortest\ path\ from\ the\ source\ vertex\ {@code\ s}\ to\ vertex\ {@code\ v};\r\n\ \ \ \ \ \ \ \ \ {@code\ Double.POSITIVE_INFINITY}\ if\ no\ such\ path\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment4.params=v
comment4.target=boolean\ hasPathTo(int)
comment4.text=\r\n\ Returns\ true\ if\ there\ is\ a\ path\ from\ the\ source\ vertex\ {@code\ s}\ to\ vertex\ {@code\ v}.\r\n\r\n\ @param\ \ v\ the\ destination\ vertex\r\n\ @return\ {@code\ true}\ if\ there\ is\ a\ path\ from\ the\ source\ vertex\r\n\ \ \ \ \ \ \ \ \ {@code\ s}\ to\ vertex\ {@code\ v};\ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment5.params=v
comment5.target=java.lang.Iterable\ pathTo(int)
comment5.text=\r\n\ Returns\ a\ shortest\ path\ from\ the\ source\ vertex\ {@code\ s}\ to\ vertex\ {@code\ v}.\r\n\r\n\ @param\ \ v\ the\ destination\ vertex\r\n\ @return\ a\ shortest\ path\ from\ the\ source\ vertex\ {@code\ s}\ to\ vertex\ {@code\ v}\r\n\ \ \ \ \ \ \ \ \ as\ an\ iterable\ of\ edges,\ and\ {@code\ null}\ if\ no\ such\ path\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment6.params=G\ s
comment6.target=boolean\ check(EdgeWeightedDigraph_T,\ int)
comment7.params=v
comment7.target=void\ validateVertex(int)
comment8.params=args
comment8.target=void\ main(java.lang.String[])
comment8.text=\r\n\ Unit\ tests\ the\ {@code\ DijkstraSP}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
numComments=9
