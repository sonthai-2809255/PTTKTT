#BlueJ class context
comment0.target=Point2D
comment0.text=\r\n\ \ The\ {@code\ Point}\ class\ is\ an\ immutable\ data\ type\ to\ encapsulate\ a\r\n\ \ two-dimensional\ point\ with\ real-value\ coordinates.\r\n\ \ <p>\r\n\ \ Note\:\ in\ order\ to\ deal\ with\ the\ difference\ behavior\ of\ double\ and\ \r\n\ \ Double\ with\ respect\ to\ -0.0\ and\ +0.0,\ the\ Point2D\ constructor\ converts\r\n\ \ any\ coordinates\ that\ are\ -0.0\ to\ +0.0.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ \r\n\ \ see\ <a\ href\="https\://algs4.cs.princeton.edu/12oop">Section\ 1.2</a>\ of\ \r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\ \r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=x\ y
comment1.target=Point2D(double,\ double)
comment1.text=\r\n\ Initializes\ a\ new\ point\ (x,\ y).\r\n\ @param\ x\ the\ x-coordinate\r\n\ @param\ y\ the\ y-coordinate\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ x}\ or\ {@code\ y}\r\n\ \ \ \ is\ {@code\ Double.NaN},\ {@code\ Double.POSITIVE_INFINITY}\ or\r\n\ \ \ \ {@code\ Double.NEGATIVE_INFINITY}\r\n
comment10.params=that
comment10.target=double\ distanceSquaredTo(Point2D)
comment10.text=\r\n\ Returns\ the\ square\ of\ the\ Euclidean\ distance\ between\ this\ point\ and\ that\ point.\r\n\ @param\ that\ the\ other\ point\r\n\ @return\ the\ square\ of\ the\ Euclidean\ distance\ between\ this\ point\ and\ that\ point\r\n
comment11.params=that
comment11.target=int\ compareTo(Point2D)
comment11.text=\r\n\ Compares\ two\ points\ by\ y-coordinate,\ breaking\ ties\ by\ x-coordinate.\r\n\ Formally,\ the\ invoking\ point\ (x0,\ y0)\ is\ less\ than\ the\ argument\ point\ (x1,\ y1)\r\n\ if\ and\ only\ if\ either\ {@code\ y0\ <\ y1}\ or\ if\ {@code\ y0\ \=\=\ y1}\ and\ {@code\ x0\ <\ x1}.\r\n\r\n\ @param\ \ that\ the\ other\ point\r\n\ @return\ the\ value\ {@code\ 0}\ if\ this\ string\ is\ equal\ to\ the\ argument\r\n\ \ \ \ \ \ \ \ \ string\ (precisely\ when\ {@code\ equals()}\ returns\ {@code\ true});\r\n\ \ \ \ \ \ \ \ \ a\ negative\ integer\ if\ this\ point\ is\ less\ than\ the\ argument\r\n\ \ \ \ \ \ \ \ \ point;\ and\ a\ positive\ integer\ if\ this\ point\ is\ greater\ than\ the\r\n\ \ \ \ \ \ \ \ \ argument\ point\r\n
comment12.params=
comment12.target=java.util.Comparator\ polarOrder()
comment12.text=\r\n\ Compares\ two\ points\ by\ polar\ angle\ (between\ 0\ and\ 2&pi;)\ with\ respect\ to\ this\ point.\r\n\r\n\ @return\ the\ comparator\r\n
comment13.params=
comment13.target=java.util.Comparator\ atan2Order()
comment13.text=\r\n\ Compares\ two\ points\ by\ atan2()\ angle\ (between\ \uFFFD&pi;\ and\ &pi;)\ with\ respect\ to\ this\ point.\r\n\r\n\ @return\ the\ comparator\r\n
comment14.params=
comment14.target=java.util.Comparator\ distanceToOrder()
comment14.text=\r\n\ Compares\ two\ points\ by\ distance\ to\ this\ point.\r\n\r\n\ @return\ the\ comparator\r\n
comment15.params=other
comment15.target=boolean\ equals(java.lang.Object)
comment15.text=\ \ \ \ \ \ \ \r\n\ Compares\ this\ point\ to\ the\ specified\ point.\r\n\ \ \ \ \ \ \ \r\n\ @param\ \ other\ the\ other\ point\r\n\ @return\ {@code\ true}\ if\ this\ point\ equals\ {@code\ other};\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment16.params=
comment16.target=java.lang.String\ toString()
comment16.text=\r\n\ Return\ a\ string\ representation\ of\ this\ point.\r\n\ @return\ a\ string\ representation\ of\ this\ point\ in\ the\ format\ (x,\ y)\r\n
comment17.params=
comment17.target=int\ hashCode()
comment17.text=\r\n\ Returns\ an\ integer\ hash\ code\ for\ this\ point.\r\n\ @return\ an\ integer\ hash\ code\ for\ this\ point\r\n
comment18.params=
comment18.target=void\ draw()
comment18.text=\r\n\ Plot\ this\ point\ using\ standard\ draw.\r\n
comment19.params=that
comment19.target=void\ drawTo(Point2D)
comment19.text=\r\n\ Plot\ a\ line\ from\ this\ point\ to\ that\ point\ using\ standard\ draw.\r\n\ @param\ that\ the\ other\ point\r\n
comment2.params=
comment2.target=double\ x()
comment2.text=\r\n\ Returns\ the\ x-coordinate.\r\n\ @return\ the\ x-coordinate\r\n
comment20.params=args
comment20.target=void\ main(java.lang.String[])
comment20.text=\r\n\ Unit\ tests\ the\ point\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment3.params=
comment3.target=double\ y()
comment3.text=\r\n\ Returns\ the\ y-coordinate.\r\n\ @return\ the\ y-coordinate\r\n
comment4.params=
comment4.target=double\ r()
comment4.text=\r\n\ Returns\ the\ polar\ radius\ of\ this\ point.\r\n\ @return\ the\ polar\ radius\ of\ this\ point\ in\ polar\ coordiantes\:\ sqrt(x*x\ +\ y*y)\r\n
comment5.params=
comment5.target=double\ theta()
comment5.text=\r\n\ Returns\ the\ angle\ of\ this\ point\ in\ polar\ coordinates.\r\n\ @return\ the\ angle\ (in\ radians)\ of\ this\ point\ in\ polar\ coordiantes\ (between\ \uFFFD&pi;\ and\ &pi;)\r\n
comment6.params=that
comment6.target=double\ angleTo(Point2D)
comment6.text=\r\n\ Returns\ the\ angle\ between\ this\ point\ and\ that\ point.\r\n\ @return\ the\ angle\ in\ radians\ (between\ &pi;\ and\ &pi;)\ between\ this\ point\ and\ that\ point\ (0\ if\ equal)\r\n
comment7.params=a\ b\ c
comment7.target=int\ ccw(Point2D,\ Point2D,\ Point2D)
comment7.text=\r\n\ Returns\ true\ if\ a?b?c\ is\ a\ counterclockwise\ turn.\r\n\ @param\ a\ first\ point\r\n\ @param\ b\ second\ point\r\n\ @param\ c\ third\ point\r\n\ @return\ {\ -1,\ 0,\ +1\ }\ if\ a?b?c\ is\ a\ {\ clockwise,\ collinear;\ counterclocwise\ }\ turn.\r\n
comment8.params=a\ b\ c
comment8.target=double\ area2(Point2D,\ Point2D,\ Point2D)
comment8.text=\r\n\ Returns\ twice\ the\ signed\ area\ of\ the\ triangle\ a-b-c.\r\n\ @param\ a\ first\ point\r\n\ @param\ b\ second\ point\r\n\ @param\ c\ third\ point\r\n\ @return\ twice\ the\ signed\ area\ of\ the\ triangle\ a-b-c\r\n
comment9.params=that
comment9.target=double\ distanceTo(Point2D)
comment9.text=\r\n\ Returns\ the\ Euclidean\ distance\ between\ this\ point\ and\ that\ point.\r\n\ @param\ that\ the\ other\ point\r\n\ @return\ the\ Euclidean\ distance\ between\ this\ point\ and\ that\ point\r\n
numComments=21
