#BlueJ class context
comment0.target=InversionsStudent
comment0.text=\r\n\ \ The\ {@code\ InversionsStudent}\ class\ provides\ static\ methods\ to\ count\ the\ \r\n\ \ number\ of\ <em>inversions</em>\ in\ either\ an\ array\ of\ integers\ or\ comparables.\r\n\ \ An\ inversion\ in\ an\ array\ {@code\ a[]}\ is\ a\ pair\ of\ indicies\ {@code\ i}\ and\r\n\ \ {@code\ j}\ such\ that\ {@code\ i\ <\ j}\ and\ {@code\ a[i]\ >\ a[j]}.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ a\ generalization\ of\ mergesort.\ The\ <em>count</em>\r\n\ \ operation\ takes\ time\ proportional\ to\ <em>n</em>\ log\ <em>n</em>,\r\n\ \ where\ <em>n</em>\ is\ the\ number\ of\ keys\ in\ the\ array.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\ <a\ href\="https\://algs4.cs.princeton.edu/22mergesort">Section\ 2.2</a>\r\n\ \ of\ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=
comment1.target=InversionsStudent()
comment2.params=a\ aux\ lo\ mid\ hi
comment2.target=long\ merge(java.util.List,\ java.util.List,\ int,\ int,\ int)
comment3.params=a\ b\ aux\ lo\ hi
comment3.target=long\ count(java.util.List,\ java.util.List,\ java.util.List,\ int,\ int)
comment4.params=a
comment4.target=long\ count(java.util.List)
comment4.text=\r\n\ Returns\ the\ number\ of\ inversions\ in\ the\ integer\ array.\r\n\ The\ argument\ array\ is\ not\ modified.\r\n\ @param\ \ a\ the\ array\r\n\ @return\ the\ number\ of\ inversions\ in\ the\ array.\ An\ inversion\ is\ a\ pair\ of\ \r\n\ \ \ \ \ \ \ \ \ indicies\ {@code\ i}\ and\ {@code\ j}\ such\ that\ {@code\ i\ <\ j}\r\n\ \ \ \ \ \ \ \ \ and\ {@code\ a[i]\ >\ a[j]}.\r\n
comment5.params=v\ w
comment5.target=boolean\ less(java.lang.Comparable,\ java.lang.Comparable)
comment5.text=\r\n\ Returns\ the\ number\ of\ inversions\ in\ the\ comparable\ array.\r\n\ The\ argument\ array\ is\ not\ modified.\r\n\ @param\ \ a\ the\ array\r\n\ @param\ <Key>\ the\ inferred\ type\ of\ the\ elements\ in\ the\ array\r\n\ @return\ the\ number\ of\ inversions\ in\ the\ array.\ An\ inversion\ is\ a\ pair\ of\ \r\n\ \ \ \ \ \ \ \ \ indicies\ {@code\ i}\ and\ {@code\ j}\ such\ that\ {@code\ i\ <\ j}\r\n\ \ \ \ \ \ \ \ \ and\ {@code\ a[i].compareTo(a[j])\ >\ 0}.\r\n\r\n\ \ \ \ public\ static\ <Key\ extends\ Comparable<Key>>\ long\ count(Key[]\ a)\ {\r\n\ \ \ \ \ \ \ \ Key[]\ b\ \ \ \=\ a.clone();\r\n\ \ \ \ \ \ \ \ Key[]\ aux\ \=\ a.clone();\r\n\ \ \ \ \ \ \ \ long\ inversions\ \=\ count(a,\ b,\ aux,\ 0,\ a.length\ -\ 1);\r\n\ \ \ \ \ \ \ \ return\ inversions;\r\n}
comment6.params=a\ lo\ hi
comment6.target=long\ brute(java.util.List,\ int,\ int)
comment7.params=args
comment7.target=void\ main(java.lang.String[])
comment7.text=\r\n\ Reads\ a\ sequence\ of\ integers\ from\ standard\ input\ and\r\n\ prints\ the\ number\ of\ inversions\ to\ standard\ output.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
numComments=8
