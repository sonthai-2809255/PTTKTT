#BlueJ class context
comment0.target=MinPQ
comment0.text=\r\n\ The\ {@code\ MinPQ}\ class\ represents\ a\ priority\ queue\ of\ generic\ keys.\r\n\ It\ supports\ the\ usual\ <em>insert</em>\ and\ <em>delete-the-min</em>\r\n\ operations,\ along\ with\ methods\ for\ peeking\ at\ the\ min\ key,\r\n\ testing\ if\ the\ priority\ queue\ is\ empty,\ and\ iterating\ through\r\n\ the\ keys.\r\n\ <p>\r\n\ This\ implementation\ uses\ a\ binary\ heap.\r\n\ The\ <em>insert</em>\ and\ <em>delete-the-min</em>\ operations\ take\r\n\ logarithmic\ amortized\ time.\r\n\ The\ <em>min</em>,\ <em>size</em>,\ and\ <em>is-empty</em>\ operations\ take\r\n\ constant\ time.\r\n\ Construction\ takes\ time\ proportional\ to\ the\ specified\ capacity\ or\ the\ number\r\n\ of\r\n\ items\ used\ to\ initialize\ the\ data\ structure.\r\n\ <p>\r\n\ For\ additional\ documentation,\ see\r\n\ <a\ href\="https\://algs4.cs.princeton.edu/24pq">Section\ 2.4</a>\ of\r\n\ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ @author\ Robert\ Sedgewick\r\n\ @author\ Kevin\ Wayne\r\n\r\n\ @param\ <Key>\ the\ generic\ type\ of\ key\ on\ this\ priority\ queue\r\n
comment1.params=initCapacity
comment1.target=MinPQ(int)
comment1.text=\r\n\ kh\u1EDFi\ t\u1EA1o\ priority\ queue\ v\u1EDBi\ dung\ l\u01B0\u1EE3ng\ ban\ \u0111\u1EA7u\ \u0111\u01B0\u1EE3c\ ch\u1EC9\ \u0111\u1ECBnh\r\n\r\n\ @param\ initCapacity\ l\u00E0\ dung\ l\u01B0\u1EE3ng\ ban\ \u0111\u1EA7u\ c\u1EE7a\ h\u00E0ng\ \u0111\u1EE3i\ \u01B0u\ ti\u00EAn\ n\u00E0y\ priority\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ queue\r\n
comment10.params=x
comment10.target=void\ insert(java.lang.Object)
comment10.text=\r\n\ Adds\ a\ new\ key\ to\ this\ priority\ queue.\r\n\ Th\u00EAm\ m\u1ED9t\ kho\u00E1\ m\u1EDBi\ v\u00E0o\ PQ\ n\u00E0y\r\n\ \r\n\ @param\ x\ the\ new\ key\ to\ add\ to\ this\ priority\ queue\r\n\ \ \ \ \ \ \ \ \ \ x\ l\u00E0\ kho\u00E1\ m\u1EDBi\ c\u1EA7n\ th\u00EAm\ v\u00E0o\r\n
comment11.params=
comment11.target=java.lang.Object\ delMin()
comment11.text=\r\n\ Removes\ and\ returns\ a\ minest\ key\ on\ this\ priority\ queue.\r\n\ lo\u1EA1i\ b\u1ECF\ v\u00E0\ tr\u1EA3\ v\u1EC1\ kho\u00E1\ nh\u1ECF\ nh\u1EA5t\ trong\ PQ\r\n\ \r\n\ @return\ a\ largest\ key\ on\ this\ priority\ queue\r\n\ @throws\ NoSuchElementException\ if\ this\ priority\ queue\ is\ empty\r\n
comment12.params=k
comment12.target=void\ swim(int)
comment12.text=\r\n\ Helper\ functions\ to\ restore\ the\ heap\ invariant\r\n\ c\u00E1c\ h\u00E0m\ tr\u01A1\ gi\u00FAp\ \u0111\u1EC3\ kh\u00F4i\ ph\u1EE5c\ t\u00EDnh\ ch\u1EA5t\ c\u00E2y\ \u0111\u1ED1ng.\r\n
comment13.params=k
comment13.target=void\ sink(int)
comment14.params=i\ j
comment14.target=boolean\ less(int,\ int)
comment14.text=\r\n\ Helper\ functions\ for\ compares\ and\ swaps.\r\n\ c\u00E1c\ h\u00E0m\ tr\u1EE3\ gi\u00FAp\ so\ s\u00E1nh\ v\u00E0\ ho\u00E1n\ \u0111\u1ED5i\r\n
comment15.params=i\ j
comment15.target=void\ exch(int,\ int)
comment16.params=
comment16.target=boolean\ isMinHeap()
comment17.params=k
comment17.target=boolean\ isMinHeap(int)
comment18.params=
comment18.target=java.util.Iterator\ iterator()
comment18.text=\r\n\ Returns\ an\ iterator\ that\ iterates\ over\ the\ keys\ on\ this\ priority\ queue\r\n\ tr\u1EA3\ v\u1EC1\ b\u1ED9\ l\u1EB7p\ qua\ c\u00E1c\ kho\u00E1\ trong\ PQ\r\n\ in\ increasing\ order.\r\n\ theo\ th\u1EE9\ t\u1EF1\ t\u0103ng\ d\u1EA7n\r\n\ The\ iterator\ doesn't\ implement\ {@code\ remove()}\ since\ it's\ optional.\r\n\r\n\ @return\ an\ iterator\ that\ iterates\ over\ the\ keys\ in\ increasing\ order\r\n
comment2.params=
comment2.target=MinPQ()
comment2.text=\r\n\ kh\u1EDFi\ t\u1EA1o\ priority\ queue\ r\u1ED7ng\ .\r\n
comment3.params=initCapacity\ comparator
comment3.target=MinPQ(int,\ java.util.Comparator)
comment3.text=\r\n\ kh\u1EDFi\ t\u1EA1o\ PQ\ r\u1ED7ng\ v\u1EDBi\ dung\ l\u01B0\u1EE3ng\ \u0111\u01B0\u1EE3c\ ch\u1EC9\ \u0111\u1ECBnh\ l\u00E0\ initCapacity\r\n\ s\u1EED\ d\u1EE5ng\ b\u1ED9\ so\ s\u00E1nh\ \u0111\u00E3\ cho\ comparable\r\n\r\n\ @param\ initCapacity\ the\ initial\ capacity\ of\ this\ priority\ queue\r\n\ @param\ comparator\ \ \ the\ order\ in\ which\ to\ compare\ the\ keys\r\n
comment4.params=comparator
comment4.target=MinPQ(java.util.Comparator)
comment4.text=\r\n\ Initializes\ an\ empty\ priority\ queue\ using\ the\ given\ comparator.\r\n\r\n\ @param\ comparator\ l\u00E0\ c\u00E1ch\ th\u1EE9c\ so\ s\u00E1nh\ c\u00E1c\ kho\u00E1\r\n
comment5.params=keys
comment5.target=MinPQ(java.lang.Object[])
comment5.text=\r\n\ Kh\u1EDFi\ t\u1EA1o\ h\u00E0ng\ \u0111\u1EE3i\ \u01B0u\ ti\u00EAn\ t\u1EEB\ m\u1ED9t\ m\u1EA3ng\ c\u00E1c\ kho\u00E1.\r\n\ Takes\ time\ proportional\ to\ the\ number\ of\ keys,\ S\u1EED\ d\u1EE5ng\ c\u00E1c\ x\u00E2y\ d\u1EF1ng\ heap\ t\u00EAn\r\n\ ph\u01B0\u01A1ng\ ph\u00E1p\ sink\r\n\r\n\ @param\ keys\ l\u00E0\ m\u1ED9t\ m\u1EA3ng\ c\u00E1c\ kho\u00E1\r\n
comment6.params=
comment6.target=boolean\ isEmpty()
comment6.text=\r\n\ Returns\ true\ if\ this\ priority\ queue\ is\ empty.\r\n\r\n\ @return\ {@code\ true}\ if\ this\ priority\ queue\ is\ empty;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment7.params=
comment7.target=int\ size()
comment7.text=\r\n\ Returns\ the\ number\ of\ keys\ on\ this\ priority\ queue.\r\n\r\n\ @return\ the\ number\ of\ keys\ on\ this\ priority\ queue\r\n
comment8.params=
comment8.target=java.lang.Object\ min()
comment8.text=\r\n\ Tr\u1EA3\ v\u1EC1\ kho\u00E1\ nh\u1ECF\ nh\u1EA5t\ trong\ priority\ queue.\r\n\r\n\ @return\ a\ largest\ key\ on\ this\ priority\ queue\r\n\ @throws\ NoSuchElementException\ X\u1EED\ l\u00FD\ n\u00E9n\ l\u1ED7i\ n\u1EBFu\ PQ\ n\u00E0y\ r\u1ED7ng\u01B0\r\n
comment9.params=capacity
comment9.target=void\ resize(int)
numComments=19
