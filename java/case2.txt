package week07.Sodoku.model;

public class Node {
	private int x,y,value;

	/**
	 * @param x
	 * @param y
	 * @param value
	 */
	public Node(int x, int y, int value) {
		this.x = x;
		this.y = y;
		this.value = value;
	}

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	public int getValue() {
		return value;
	}

	public void setValue(int value) {
		this.value = value;
	}
	
	
}

package week07.Sodoku.model;

import java.util.Scanner;

public class Game {
	private Node[][] Board;
	private  final int BoardSize=9;
	private int count;
	
	/**
	 * @param board
	 */
	//constructer
	public Game(int[][] tempBoard) {
		this.Board = new Node[this.BoardSize][this.BoardSize];
		for(int i=0 ;i < this.BoardSize; i++) {
			for(int j=0; j< this.BoardSize; j++) {
				this.Board[i][j] = new Node(i,j,tempBoard[i][j]);
			}
		}
	}
	
	//row
	public boolean validRow(int row) {
		boolean [] mark = new boolean[this.BoardSize + 1];
		for(int j=0 ;j < this.BoardSize ; j++) {
			int value = this.Board[row][j].getValue();
			if(value != 0) {
				if(mark[value]) {
					return false;
				}
				mark[value] = true;
			}
		}
		return true;
	}
	
	//column
	public boolean validCol(int col) {
		boolean [] mark = new boolean[this.BoardSize + 1];
		for(int i=0 ;i < this.BoardSize ; i++) {
			int value = this.Board[i][col].getValue();
			if(value != 0) {
				if(mark[value]) {
					return false;
				}
				mark[value] = true;
			}
		}
		return true;
	}
	
	//Zone
	public boolean validZone(int row,int col) {
		int beginrow = row - (row % 3);
		int begincol = col - (col % 3);
		boolean[] mark = new boolean[this.BoardSize + 1];
		
		for(int i=0 ; i < 3; i++) {
			for(int j=0 ;j<3 ;j++) {
				int value = this.Board[beginrow + i][begincol +j].getValue();
				if(value != 0) {
					if(mark[value]) {
						return false;
					}
					mark[value] = true;
				}
			}
		}
		return true;
	}
	
	public boolean validgame() {
		for(int i=0; i<this.BoardSize; i++) {
			if(!this.validCol(i) || !this.validRow(i)) {
				return false;
			}
		}
		for(int i=0; i< this.BoardSize ;i+= 3) {
			for(int j=0; j < this.BoardSize;j+=3) {
				if(!this.validZone(i,j)) {
					return false;
				}
			}
		}
		return true;
	}
	
	public void display() {
		System.out.println("---------------------");
		for(int i=0 ;i< this.BoardSize; i++) {
			for(int j=0; j<this.BoardSize; j++) {
				System.out.print(Board[i][j].getValue() + " ");
			}
			System.out.println("");
		}
	}
	

	public void count() {
		int d=0;
		for (int i = 0; i < this.BoardSize; i++) {
	        for (int j = 0; j < this.BoardSize; j++) {
	            if (this.Board[i][j].getValue() != 0) {
	                d += 1;
	            }
	        }
		}
		this.setCount(d);
	}
	
	
	public void update(int row, int col, int value) {
		this.Board[row][col].setValue(value);
	}
	
	public void setCount(int count) {
		this.count = count;
	}
	public int getCout() {
		return this.count;
	}
	
	public Node[][] getBoard() { 
		return this.Board;}
	
	public int getSize() {
		return this.BoardSize;
	}
}

package week07.Sodoku.controler;

public interface IGame {
	public void create();
	
	public void start();
	
	public void close();
}

package week07.Sodoku.controler;

import java.util.Scanner;

import week07.Sodoku.model.Game;
import week07.Sodoku.view.GameScreen;

public class GameController implements IGame{
	private Game game;
	private GameScreen screen;
	
	
	@Override
	public void create() {
		int[][] initialBoard = {
	            {5, 3, 0, 0, 7, 0, 0, 0, 0},
	            {6, 0, 0, 1, 9, 5, 0, 0, 0},
	            {0, 9, 8, 0, 0, 0, 0, 6, 0},
	            {8, 0, 0, 0, 6, 0, 0, 0, 3},
	            {4, 0, 0, 8, 0, 3, 0, 0, 1},
	            {7, 0, 0, 0, 2, 0, 0, 0, 6},
	            {0, 6, 0, 0, 0, 0, 2, 8, 0},
	            {0, 0, 0, 4, 1, 9, 0, 0, 5},
	            {0, 0, 0, 0, 8, 0, 0, 7, 9}
	        };
		this.game = new Game(initialBoard);
		this.screen = new GameScreen();
		}

	@Override
	public void start() {
		
		Scanner scanner = new Scanner(System.in);
		while(this.game.validgame()) {
			 this.screen.display(this.game);

			 int row = 0;
	         int col = 0;
	         int value= 0;
	         System.out.println("nhap hang= ");
	         row = scanner.nextInt();
	         System.out.println("nhap cot= ");
	         col = scanner.nextInt();
	         System.out.println("nhap gia tri (1 - 9) = ");
	         value = scanner.nextInt();
	         
	         this.game.update(row-1, col-1, value);
		}
		scanner.close();
		this.game.count();
	}

	@Override
	public void close() {
		
			this.screen.gamevoid(this.game);
	}
	
	public Game getgame() {
		return this.game;
	}
	
	public GameScreen getscreen() {
		return this.screen;
	}
}

package week07.Sodoku.view;

import week07.Sodoku.controler.GameController;
import week07.Sodoku.model.Game;

public class GameScreen {
	public GameScreen() {}
	
	public void display(Game game) {
		System.out.println("---------------------");
		for(int i=0 ;i< game.getSize(); i++) {
			for(int j=0; j<game.getSize(); j++) {
				System.out.print(game.getBoard()[i][j].getValue() + " ");
			}
			System.out.println("");
		}
	}
	
	public void gamevoid(Game game) {
		if(game.getCout() == 81 ) 
			System.out.println("hoàn thành ");
		else {
			System.out.println("thua ");
		}
	}
	
}
